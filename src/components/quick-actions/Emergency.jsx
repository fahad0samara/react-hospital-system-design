import React, { useState, useRef } from 'react';
import Modal from '../shared/Modal';
import { FiAlertTriangle, FiClock, FiMapPin, FiUser, FiPrinter, FiDownload, FiShare2, FiActivity } from 'react-icons/fi';
import { useEmergency } from '../../context/EmergencyContext';

const Emergency = ({ isOpen, onClose }) => {
  const formRef = useRef(null);
  const { addEmergencyCase } = useEmergency();
  const initialFormState = {
    patientName: '',
    age: '',
    location: '',
    condition: '',
    severityLevel: 'medium',
    description: '',
    requiredSpecialists: [],
    caseId: '',
    vitalSigns: {
      bloodPressure: '',
      heartRate: '',
      temperature: '',
      oxygenSaturation: ''
    }
  };
  const [formData, setFormData] = useState(initialFormState);

  const specialists = [
    'Cardiologist',
    'Neurologist',
    'Trauma Surgeon',
    'Emergency Physician',
    'Anesthesiologist',
    'Pediatrician'
  ];

  const severityColors = {
    low: 'from-yellow-500 to-yellow-600',
    medium: 'from-orange-500 to-orange-600',
    high: 'from-red-500 to-red-600',
    critical: 'from-rose-600 to-rose-700'
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSpecialistToggle = (specialist) => {
    setFormData(prev => ({
      ...prev,
      requiredSpecialists: prev.requiredSpecialists.includes(specialist)
        ? prev.requiredSpecialists.filter(s => s !== specialist)
        : [...prev.requiredSpecialists, specialist]
    }));
  };

  const handleDownload = () => {
    const reportContent = generateReportContent();
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `emergency-report-${formData.caseId}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const generateReportContent = () => {
    return `
EMERGENCY CASE REPORT
===========================================
Case ID: ${formData.caseId}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

PATIENT INFORMATION
-------------------------------------------
Name: ${formData.patientName}
Age: ${formData.age}
Location: ${formData.location}

EMERGENCY DETAILS
-------------------------------------------
Primary Condition: ${formData.condition}
Severity Level: ${formData.severityLevel.toUpperCase()}
Required Specialists: ${formData.requiredSpecialists.join(', ')}

VITAL SIGNS
-------------------------------------------
Blood Pressure: ${formData.vitalSigns.bloodPressure || 'Not recorded'}
Heart Rate: ${formData.vitalSigns.heartRate || 'Not recorded'}
Temperature: ${formData.vitalSigns.temperature || 'Not recorded'}
Oxygen Saturation: ${formData.vitalSigns.oxygenSaturation || 'Not recorded'}

DESCRIPTION
-------------------------------------------
${formData.description}

HIPAA COMPLIANCE NOTICE
-------------------------------------------
This medical record contains confidential information 
protected under HIPAA regulations. Unauthorized access, 
use, or disclosure is strictly prohibited.

Generated by Hospital Management System
Report ID: ${formData.caseId}-${Date.now()}
    `;
  };

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>Emergency Case Report - ${formData.caseId}</title>
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
          <style>
            :root {
              --color-primary: #dc2626;
              --color-primary-light: #fee2e2;
              --color-secondary: #1e40af;
              --color-gray: #6b7280;
              --color-gray-light: #f3f4f6;
            }
            
            * {
              box-sizing: border-box;
              margin: 0;
              padding: 0;
            }
            
            body { 
              font-family: 'Inter', sans-serif;
              line-height: 1.6;
              padding: 40px;
              max-width: 1000px;
              margin: 0 auto;
              background: #fff;
              color: #1f2937;
            }

            .header {
              text-align: center;
              margin-bottom: 40px;
              padding-bottom: 20px;
              border-bottom: 2px solid var(--color-primary);
            }

            .logo {
              width: 120px;
              height: 120px;
              margin-bottom: 20px;
              background: var(--color-primary);
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              margin: 0 auto 20px;
              color: white;
              font-size: 48px;
              font-weight: bold;
            }

            .hospital-info {
              margin-bottom: 20px;
              text-align: center;
            }

            .hospital-name {
              font-size: 24px;
              font-weight: bold;
              color: var(--color-secondary);
              margin-bottom: 5px;
            }

            .hospital-details {
              color: var(--color-gray);
              font-size: 14px;
            }

            h1 { 
              color: var(--color-primary);
              font-size: 32px;
              margin-bottom: 10px;
            }

            .case-id { 
              font-size: 18px;
              color: var(--color-secondary);
              margin-bottom: 10px;
            }

            .emergency-level {
              display: inline-block;
              padding: 8px 16px;
              border-radius: 20px;
              font-weight: 600;
              margin: 10px 0;
              ${formData.severityLevel === 'critical' 
                ? 'background: #dc2626; color: white;' 
                : formData.severityLevel === 'high'
                ? 'background: #ef4444; color: white;'
                : formData.severityLevel === 'medium'
                ? 'background: #f97316; color: white;'
                : 'background: #eab308; color: white;'
              }
            }

            .section { 
              background: #fff;
              border: 1px solid #e5e7eb;
              border-radius: 12px;
              padding: 24px;
              margin: 24px 0;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }

            .section-title {
              font-size: 20px;
              color: var(--color-secondary);
              margin-bottom: 16px;
              padding-bottom: 8px;
              border-bottom: 2px solid var(--color-gray-light);
            }

            .info-grid {
              display: grid;
              grid-template-columns: repeat(2, 1fr);
              gap: 20px;
            }

            .info-item {
              padding: 12px;
              background: var(--color-gray-light);
              border-radius: 8px;
            }

            .info-label {
              font-size: 14px;
              color: var(--color-gray);
              margin-bottom: 4px;
            }

            .info-value {
              font-size: 16px;
              font-weight: 500;
              color: #1f2937;
            }

            .vital-signs {
              display: grid;
              grid-template-columns: repeat(2, 1fr);
              gap: 16px;
            }

            .vital-sign {
              padding: 16px;
              background: var(--color-gray-light);
              border-radius: 8px;
              border: 1px solid #e5e7eb;
            }

            .vital-title {
              font-weight: 600;
              color: var(--color-secondary);
              margin-bottom: 8px;
            }

            .vital-value {
              font-size: 24px;
              font-weight: 700;
              color: var(--color-primary);
            }

            .specialists {
              display: flex;
              flex-wrap: wrap;
              gap: 8px;
              margin-top: 12px;
            }

            .specialist-tag {
              padding: 6px 12px;
              background: var(--color-primary-light);
              color: var(--color-primary);
              border-radius: 16px;
              font-size: 14px;
              font-weight: 500;
            }

            .description {
              white-space: pre-line;
              color: #4b5563;
              line-height: 1.8;
            }

            .signature-section {
              margin-top: 40px;
              display: grid;
              grid-template-columns: repeat(2, 1fr);
              gap: 40px;
            }

            .signature-box {
              border-top: 2px solid var(--color-gray-light);
              padding-top: 16px;
              text-align: center;
            }

            .signature-title {
              font-size: 14px;
              color: var(--color-gray);
              margin-bottom: 40px;
            }

            .hipaa-notice {
              margin-top: 40px;
              padding: 20px;
              background: var(--color-primary-light);
              border: 2px solid var(--color-primary);
              border-radius: 12px;
              font-size: 14px;
            }

            .footer {
              margin-top: 40px;
              text-align: center;
              font-size: 12px;
              color: var(--color-gray);
            }

            .qr-code {
              width: 100px;
              height: 100px;
              margin: 20px auto;
              background: #e5e7eb;
              padding: 8px;
              border-radius: 8px;
            }

            @media print {
              body { 
                padding: 20px;
              }

              .section {
                break-inside: avoid;
                page-break-inside: avoid;
              }

              .signature-section {
                page-break-inside: avoid;
              }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="logo">H+</div>
            <div class="hospital-info">
              <div class="hospital-name">Metropolitan General Hospital</div>
              <div class="hospital-details">
                1234 Healthcare Avenue<br>
                Medical District, MD 12345<br>
                Tel: (555) 123-4567
              </div>
            </div>
          </div>

          <h1>EMERGENCY CASE REPORT</h1>
          <div class="case-id">Case ID: ${formData.caseId}</div>
          <div class="emergency-level">${formData.severityLevel.toUpperCase()} PRIORITY</div>
          
          <div class="section">
            <h2 class="section-title">Patient Information</h2>
            <div class="info-grid">
              <div class="info-item">
                <div class="info-label">Full Name</div>
                <div class="info-value">${formData.patientName}</div>
              </div>
              <div class="info-item">
                <div class="info-label">Age</div>
                <div class="info-value">${formData.age} years</div>
              </div>
              <div class="info-item">
                <div class="info-label">Location</div>
                <div class="info-value">${formData.location}</div>
              </div>
              <div class="info-item">
                <div class="info-label">Report Time</div>
                <div class="info-value">${new Date().toLocaleString()}</div>
              </div>
            </div>
          </div>

          <div class="section">
            <h2 class="section-title">Emergency Details</h2>
            <div class="info-grid">
              <div class="info-item">
                <div class="info-label">Primary Condition</div>
                <div class="info-value">${formData.condition}</div>
              </div>
              <div class="info-item">
                <div class="info-label">Required Specialists</div>
                <div class="specialists">
                  ${formData.requiredSpecialists.map(specialist => 
                    `<span class="specialist-tag">${specialist}</span>`
                  ).join('')}
                </div>
              </div>
            </div>
          </div>

          <div class="section">
            <h2 class="section-title">Vital Signs</h2>
            <div class="vital-signs">
              <div class="vital-sign">
                <div class="vital-title">Blood Pressure</div>
                <div class="vital-value">
                  ${formData.vitalSigns.bloodPressure || 'Not recorded'}
                </div>
              </div>
              <div class="vital-sign">
                <div class="vital-title">Heart Rate</div>
                <div class="vital-value">
                  ${formData.vitalSigns.heartRate || 'Not recorded'}
                </div>
              </div>
              <div class="vital-sign">
                <div class="vital-title">Temperature</div>
                <div class="vital-value">
                  ${formData.vitalSigns.temperature || 'Not recorded'}
                </div>
              </div>
              <div class="vital-sign">
                <div class="vital-title">Oxygen Saturation</div>
                <div class="vital-value">
                  ${formData.vitalSigns.oxygenSaturation || 'Not recorded'}
                </div>
              </div>
            </div>
          </div>

          <div class="section">
            <h2 class="section-title">Emergency Description</h2>
            <div class="description">${formData.description}</div>
          </div>

          <div class="signature-section">
            <div class="signature-box">
              <div class="signature-title">Attending Physician's Signature</div>
              _______________________________<br>
              <span style="font-size: 14px;">Dr. ${formData.assignedDoctor || '_________________'}</span><br>
              <span style="font-size: 12px; color: #666;">Date: ${new Date().toLocaleDateString()}</span>
            </div>
            <div class="signature-box">
              <div class="signature-title">Emergency Department Head</div>
              _______________________________<br>
              <span style="font-size: 14px;">Dr. Sarah Mitchell</span><br>
              <span style="font-size: 12px; color: #666;">Head of Emergency Medicine</span>
            </div>
          </div>

          <div class="hipaa-notice">
            <strong>HIPAA COMPLIANCE NOTICE</strong><br>
            This medical record contains confidential information protected under HIPAA regulations.
            Unauthorized access, use, or disclosure is strictly prohibited. This document is intended
            only for the use of authorized healthcare providers and the patient's designated representatives.<br><br>
            <strong>Report Details:</strong><br>
            Generated: ${new Date().toLocaleString()}<br>
            Report ID: ${formData.caseId}-${Date.now()}<br>
            Document Classification: CONFIDENTIAL MEDICAL RECORD
          </div>

          <div class="footer">
            <div class="qr-code">
              <!-- Placeholder for QR Code -->
              QR Code
            </div>
            Metropolitan General Hospital ${new Date().getFullYear()}<br>
            Emergency Department | 24/7 Emergency Care<br>
            This is a computer-generated document. No signature is required.
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    setTimeout(() => {
      printWindow.print();
    }, 500);
  };

  const generateCaseId = () => {
    return `ER-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const newEmergencyCase = {
      ...formData,
      caseId: generateCaseId(),
      status: 'active',
      timestamp: new Date().toISOString(),
      responseTime: null,
      assignedStaff: [],
      reportedBy: 'Dr. John Doe',
      department: 'Emergency Medicine',
      priority: formData.severityLevel === 'critical' ? 1 : 
               formData.severityLevel === 'high' ? 2 :
               formData.severityLevel === 'medium' ? 3 : 4,
      vitalSigns: {
        heartRate: formData.vitalSigns.heartRate || 'N/A',
        temperature: formData.vitalSigns.temperature || 'N/A',
        bloodPressure: formData.vitalSigns.bloodPressure || 'N/A',
        oxygenSaturation: formData.vitalSigns.oxygenSaturation || 'N/A'
      }
    };
    
    console.log('Submitting emergency case:', newEmergencyCase);
    addEmergencyCase(newEmergencyCase);
    setFormData(initialFormState);
    onClose();

    // Redirect to admin dashboard
    window.location.href = '/admin/emergency';
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Emergency Case Report" maxWidth="max-w-3xl">
      <div className="relative">
        {/* Emergency Alert Banner */}
        <div className={`absolute -top-14 -left-6 -right-6 p-4 bg-gradient-to-r ${severityColors[formData.severityLevel]} text-white rounded-t-2xl shadow-lg`}>
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
            <div className="flex items-center space-x-3">
              <FiAlertTriangle className="w-6 h-6 animate-pulse" />
              <span className="font-semibold text-lg">Emergency Response Required</span>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <FiClock className="w-5 h-5" />
                <span>{new Date().toLocaleTimeString()}</span>
              </div>
              <div className="flex items-center space-x-2">
                <button 
                  onClick={handlePrint}
                  className="p-2 hover:bg-red-500/20 rounded-full transition-colors"
                  title="Print Report"
                >
                  <FiPrinter className="w-5 h-5" />
                </button>
                <button 
                  onClick={handleDownload}
                  className="p-2 hover:bg-red-500/20 rounded-full transition-colors"
                  title="Download Report"
                >
                  <FiDownload className="w-5 h-5" />
                </button>
                <button 
                  className="p-2 hover:bg-red-500/20 rounded-full transition-colors"
                  title="Share Report"
                >
                  <FiShare2 className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Case ID Display */}
        <div className="mb-6 mt-4 bg-gray-50 p-3 rounded-xl flex justify-between items-center">
          <div className="text-gray-600">
            Case ID: <span className="font-mono font-medium">{formData.caseId}</span>
          </div>
          <div className="text-sm text-gray-500">
            {new Date().toLocaleDateString()}
          </div>
        </div>

        <form ref={formRef} onSubmit={handleSubmit} className="space-y-6 px-2 sm:px-4">
          {/* Patient Information */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
            <div className="w-full">
              <label className="block text-sm font-medium text-gray-700 mb-1">Patient Name</label>
              <div className="relative">
                <FiUser className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  name="patientName"
                  value={formData.patientName}
                  onChange={handleChange}
                  className="w-full pl-10 pr-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                  placeholder="Enter patient name"
                  required
                />
              </div>
            </div>
            <div className="w-full">
              <label className="block text-sm font-medium text-gray-700 mb-1">Age</label>
              <input
                type="number"
                name="age"
                value={formData.age}
                onChange={handleChange}
                className="w-full px-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                placeholder="Patient's age"
                required
              />
            </div>
          </div>

          {/* Location and Condition */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
            <div className="w-full">
              <label className="block text-sm font-medium text-gray-700 mb-1">Location</label>
              <div className="relative">
                <FiMapPin className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  name="location"
                  value={formData.location}
                  onChange={handleChange}
                  className="w-full pl-10 pr-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                  placeholder="Emergency location"
                  required
                />
              </div>
            </div>
            <div className="w-full">
              <label className="block text-sm font-medium text-gray-700 mb-1">Primary Condition</label>
              <input
                type="text"
                name="condition"
                value={formData.condition}
                onChange={handleChange}
                className="w-full px-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                placeholder="Main medical condition"
                required
              />
            </div>
          </div>

          {/* Vital Signs Section */}
          <div className="w-full mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">Vital Signs</label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm text-gray-600 mb-1">Blood Pressure</label>
                <input
                  type="text"
                  name="bloodPressure"
                  value={formData.vitalSigns.bloodPressure}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    vitalSigns: { ...prev.vitalSigns, bloodPressure: e.target.value }
                  }))}
                  className="w-full px-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                  placeholder="e.g., 120/80"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Heart Rate</label>
                <input
                  type="text"
                  name="heartRate"
                  value={formData.vitalSigns.heartRate}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    vitalSigns: { ...prev.vitalSigns, heartRate: e.target.value }
                  }))}
                  className="w-full px-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                  placeholder="e.g., 75 bpm"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Temperature</label>
                <input
                  type="text"
                  name="temperature"
                  value={formData.vitalSigns.temperature}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    vitalSigns: { ...prev.vitalSigns, temperature: e.target.value }
                  }))}
                  className="w-full px-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                  placeholder="e.g., 98.6°F"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1">Oxygen Saturation</label>
                <input
                  type="text"
                  name="oxygenSaturation"
                  value={formData.vitalSigns.oxygenSaturation}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    vitalSigns: { ...prev.vitalSigns, oxygenSaturation: e.target.value }
                  }))}
                  className="w-full px-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
                  placeholder="e.g., 98%"
                />
              </div>
            </div>
          </div>

          {/* Severity Level */}
          <div className="w-full">
            <label className="block text-sm font-medium text-gray-700 mb-2">Severity Level</label>
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-3">
              {Object.entries({
                low: 'Low Priority',
                medium: 'Medium Priority',
                high: 'High Priority',
                critical: 'Critical'
              }).map(([value, label]) => (
                <button
                  key={value}
                  type="button"
                  onClick={() => handleChange({ target: { name: 'severityLevel', value } })}
                  className={`px-3 sm:px-4 py-2 rounded-xl font-medium text-white shadow-sm transition-all text-sm sm:text-base
                    ${formData.severityLevel === value 
                      ? `bg-gradient-to-r ${severityColors[value]} shadow-lg scale-105` 
                      : 'bg-gray-400 hover:bg-gray-500'}`}
                >
                  {label}
                </button>
              ))}
            </div>
          </div>

          {/* Required Specialists */}
          <div className="w-full">
            <label className="block text-sm font-medium text-gray-700 mb-2">Required Specialists</label>
            <div className="grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-3 gap-2">
              {specialists.map((specialist) => (
                <button
                  key={specialist}
                  type="button"
                  onClick={() => handleSpecialistToggle(specialist)}
                  className={`px-3 sm:px-4 py-2 rounded-xl font-medium transition-all text-sm sm:text-base ${
                    formData.requiredSpecialists.includes(specialist)
                      ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {specialist}
                </button>
              ))}
            </div>
          </div>

          {/* Description */}
          <div className="w-full">
            <label className="block text-sm font-medium text-gray-700 mb-1">Emergency Description</label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows="4"
              className="w-full px-4 py-2.5 bg-white rounded-xl border border-gray-300 focus:ring-2 focus:ring-red-500 focus:border-transparent shadow-sm"
              placeholder="Detailed description of the emergency situation..."
              required
            ></textarea>
          </div>

          {/* Submit Button */}
          <div className="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="w-full sm:w-auto px-6 py-2.5 rounded-xl border border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors font-medium order-2 sm:order-1"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="w-full sm:w-auto px-6 py-2.5 rounded-xl bg-gradient-to-r from-red-600 to-red-700 text-white hover:from-red-700 hover:to-red-800 transition-colors font-medium shadow-lg hover:shadow-xl order-1 sm:order-2"
            >
              Report Emergency
            </button>
          </div>
        </form>
      </div>
    </Modal>
  );
};

export default Emergency;
